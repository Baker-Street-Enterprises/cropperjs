"use strict";(self.webpackChunkcropperjs=self.webpackChunkcropperjs||[]).push([[789],{2052:function(n,e,a){a.r(e),a.d(e,{data:function(){return t}});const t=JSON.parse('{"key":"v-b59762cc","path":"/zh/api/cropper-element.html","title":"CropperElement","lang":"zh-CN","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"规格","slug":"规格","link":"#规格","children":[]},{"level":2,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"$getShadowRoot","slug":"getshadowroot","link":"#getshadowroot","children":[]},{"level":3,"title":"$addStyles","slug":"addstyles","link":"#addstyles","children":[]},{"level":3,"title":"$emit","slug":"emit","link":"#emit","children":[]},{"level":3,"title":"$nextTick","slug":"nexttick","link":"#nexttick","children":[]}]},{"level":2,"title":"静态属性","slug":"静态属性","link":"#静态属性","children":[]},{"level":2,"title":"静态方法","slug":"静态方法","link":"#静态方法","children":[{"level":3,"title":"$define","slug":"define","link":"#define","children":[]}]}],"git":{"updatedTime":1670149517000,"contributors":[{"name":"Chen Fengyuan","email":"chenfengyuan@outlook.com","commits":1}]},"filePathRelative":"zh/api/cropper-element.md"}')},3756:function(n,e,a){a.r(e),a.d(e,{default:function(){return g}});var t=a(6252);const s=(0,t._)("h1",{id:"cropperelement",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#cropperelement","aria-hidden":"true"},"#"),(0,t.Uk)(" CropperElement")],-1),o=(0,t._)("code",null,"CropperElement",-1),l={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement",target:"_blank",rel:"noopener noreferrer"},p=(0,t.uE)('<h2 id="规格" tabindex="-1"><a class="header-anchor" href="#规格" aria-hidden="true">#</a> 规格</h2><ul><li>公共属性的名称应以字母字符开头。</li><li>私有属性的名称应该以 <code>$</code> 开头。</li><li>公共/私有自定义方法的名称应以 <code>$</code> 开头。</li><li>私有自定义侦听器的名称应以 <code>$on</code> 开头。</li></ul><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CropperElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cropperjs&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// Or</span>\n<span class="token comment">// import CropperElement from &#39;@cropper/element&#39;;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyCropperElement</span> <span class="token keyword">extends</span> <span class="token class-name">CropperElement</span> <span class="token punctuation">{</span>\n  myStringProperty <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  myNumberProperty <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>\n  myBooleanProperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">observedAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>observedAttributes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token string">&#39;my-boolean-property&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;my-number-property&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;my-string-property&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\nMyCropperElement<span class="token punctuation">.</span><span class="token function">$define</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cropper-element</span> <span class="token attr-name">my-string-property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">my-number-property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">my-boolean-property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cropper-element</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h2>',6),c={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement",target:"_blank",rel:"noopener noreferrer"},i=(0,t._)("code",null,"HTMLElement",-1),r=(0,t.uE)('<table><thead><tr><th>名称</th><th>类型</th><th>默认值</th><th>可选值</th><th>描述</th></tr></thead><tbody><tr><td>shadowRootMode</td><td><code>string</code></td><td><code>&quot;open&quot;</code></td><td><code>&quot;closed&quot; | &quot;open&quot;</code></td><td>指示 shadow DOM 树的封装模式。</td></tr><tr><td>slottable</td><td><code>boolean</code></td><td><code>true</code></td><td>-</td><td>指示此元素是否启用默认插槽，即包含 <code>&lt;slot&gt;</code> 元素。</td></tr><tr><td>themeColor</td><td><code>string</code></td><td>-</td><td>-</td><td>指示此元素及其子元素的颜色。</td></tr></tbody></table><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><h3 id="getshadowroot" tabindex="-1"><a class="header-anchor" href="#getshadowroot" aria-hidden="true">#</a> $getShadowRoot</h3><ul><li><strong>语法</strong>：<code>$getShadowRoot()</code></li><li><strong>返回值</strong>： <ul><li>类型：<code>ShadowRoot</code></li><li>shadow root。</li></ul></li></ul><p>输出元素的 shadow root，即使它的模式是 <code>&quot;closed&quot;</code>。</p><h3 id="addstyles" tabindex="-1"><a class="header-anchor" href="#addstyles" aria-hidden="true">#</a> $addStyles</h3><ul><li><p><strong>语法</strong>：<code>$addStyles(styles)</code></p></li><li><p><strong>参数</strong>：</p><ul><li><code>styles</code>： <ul><li>类型：<code>string</code></li><li>要添加的样式。</li></ul></li></ul></li><li><p><strong>返回值</strong>：</p><ul><li>类型：<code>CSSStyleSheet | HTMLStyleElement</code></li><li>生成的样式表。</li></ul></li><li><p><strong>示例</strong>：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CropperCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncanvas<span class="token punctuation">.</span><span class="token function">$addStyles</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  :host {\n    border: 1px solid #39f;\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p>将样式添加到 shadow root。</p><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> $emit</h3><ul><li><p><strong>语法</strong>：</p><ul><li><code>$emit(type)</code></li><li><code>$emit(type, detail)</code></li><li><code>$emit(type, detail, options)</code></li></ul></li><li><p><strong>参数</strong>：</p><ul><li><code>type</code>： <ul><li>类型：<code>string</code></li><li>事件的名称。</li></ul></li><li><code>detail</code>： <ul><li>类型：<code>*</code></li><li>默认值：<code>undefined</code></li><li>初始化事件时传递的数据。</li></ul></li><li><code>options</code>： <ul><li>类型：<code>CustomEventInit</code></li><li>默认值：<code>{ bubbles：true, cancelable: true, composed: true }</code></li><li>其他事件选项。</li></ul></li></ul></li><li><p><strong>返回值</strong>：</p><ul><li>类型：<code>boolean</code></li><li>结果值。</li></ul></li><li><p><strong>示例</strong>：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> selection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CropperSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nselection<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">160</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p>在当前元素上派发事件。</p><h3 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> $nextTick</h3><ul><li><strong>语法</strong>： <ul><li><code>$nextTick()</code></li><li><code>$nextTick(callback)</code></li></ul></li><li><strong>参数</strong>： <ul><li><code>callback</code>： <ul><li>类型：<code>Function</code></li><li>在下一个 DOM 更新周期后执行的回调。</li></ul></li></ul></li><li><strong>返回值</strong>： <ul><li>类型：<code>Promise</code></li><li>一个以 <code>undefined</code> 为给定值解析后的 Promise 对象。</li></ul></li></ul><p>推迟到下一个 DOM 更新周期后执行的回调。</p><h2 id="静态属性" tabindex="-1"><a class="header-anchor" href="#静态属性" aria-hidden="true">#</a> 静态属性</h2><table><thead><tr><th>名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>$name</td><td><code>string</code></td><td>自定义元素的名称。</td></tr><tr><td>$version</td><td><code>string</code></td><td>安装包的版本。</td></tr></tbody></table><h2 id="静态方法" tabindex="-1"><a class="header-anchor" href="#静态方法" aria-hidden="true">#</a> 静态方法</h2><h3 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> $define</h3>',18),d={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry/define",target:"_blank",rel:"noopener noreferrer"},u=(0,t._)("code",null,"CustomElementRegistry.define()",-1),k=(0,t.uE)('<ul><li><p><strong>语法</strong>：</p><ul><li><code>$define()</code></li><li><code>$define(name)</code></li><li><code>$define(options)</code></li><li><code>$define(name, options)</code></li></ul></li><li><p><strong>等同于</strong>：</p><ul><li><code>customElements.define(name, constructor)</code></li><li><code>customElements.define(name, constructor, options)</code></li></ul></li><li><p><strong>参数</strong>：</p><ul><li><code>name</code>： <ul><li>类型：<code>string</code></li><li>元素名称。默认为构造函数的 <code>$name</code> 静态属性。</li></ul></li><li><code>options</code>： <ul><li>类型：<code>Object</code></li><li>元素定义选项。</li></ul></li></ul></li><li><p><strong>示例</strong>：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 定义为自主自定义元素：`&lt;my-cropper-element&gt;&lt;/my-cropper-element&gt;`.</span>\nCropperElement<span class="token punctuation">.</span><span class="token function">$define</span><span class="token punctuation">(</span><span class="token string">&#39;my-cropper-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul>',1),h={};var g=(0,a(3744).Z)(h,[["render",function(n,e){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[s,(0,t._)("p",null,[o,(0,t.Uk)(" 接口代表任何 Cropper 元素，扩展了 "),(0,t._)("a",l,[(0,t.Uk)("HTMLElement"),(0,t.Wm)(a)]),(0,t.Uk)(" 接口。")]),p,(0,t._)("p",null,[(0,t.Uk)("从其父级 "),(0,t._)("a",c,[i,(0,t.Wm)(a)]),(0,t.Uk)(" 继承属性，并实现以下属性：")]),r,(0,t._)("p",null,[(0,t.Uk)("将构造函数定义为新的自定义元素。这只是调用 "),(0,t._)("a",d,[u,(0,t.Wm)(a)]),(0,t.Uk)(" 的快捷方式。")]),k])}]])}}]);