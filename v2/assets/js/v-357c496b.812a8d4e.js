"use strict";(self.webpackChunkcropperjs=self.webpackChunkcropperjs||[]).push([[94],{6922:function(e,n,t){t.r(n),t.d(n,{data:function(){return s}});const s=JSON.parse('{"key":"v-357c496b","path":"/api/cropper-element.html","title":"CropperElement","lang":"en-US","frontmatter":{},"excerpt":"","headers":[{"level":2,"title":"Specifications","slug":"specifications","link":"#specifications","children":[]},{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Properties","slug":"properties","link":"#properties","children":[]},{"level":2,"title":"Methods","slug":"methods","link":"#methods","children":[{"level":3,"title":"$getShadowRoot","slug":"getshadowroot","link":"#getshadowroot","children":[]},{"level":3,"title":"$addStyles","slug":"addstyles","link":"#addstyles","children":[]},{"level":3,"title":"$emit","slug":"emit","link":"#emit","children":[]},{"level":3,"title":"$nextTick","slug":"nexttick","link":"#nexttick","children":[]}]},{"level":2,"title":"Static Properties","slug":"static-properties","link":"#static-properties","children":[]},{"level":2,"title":"Static methods","slug":"static-methods","link":"#static-methods","children":[{"level":3,"title":"$define","slug":"define","link":"#define","children":[]}]}],"git":{"updatedTime":1670149517000,"contributors":[{"name":"Chen Fengyuan","email":"chenfengyuan@outlook.com","commits":1}]},"filePathRelative":"api/cropper-element.md"}')},8728:function(e,n,t){t.r(n),t.d(n,{default:function(){return m}});var s=t(6252);const a=(0,s._)("h1",{id:"cropperelement",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#cropperelement","aria-hidden":"true"},"#"),(0,s.Uk)(" CropperElement")],-1),o=(0,s._)("code",null,"CropperElement",-1),l={href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement",target:"_blank",rel:"noopener noreferrer"},p=(0,s.uE)('<h2 id="specifications" tabindex="-1"><a class="header-anchor" href="#specifications" aria-hidden="true">#</a> Specifications</h2><ul><li>The name of public properties should start with an alphabetic character.</li><li>The name of private properties should start with <code>$</code>.</li><li>The name of public/private custom methods should start with <code>$</code>.</li><li>The name of private custom listeners should start with <code>$on</code>.</li></ul><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> CropperElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;cropperjs&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// Or</span>\n<span class="token comment">// import CropperElement from &#39;@cropper/element&#39;;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">MyCropperElement</span> <span class="token keyword">extends</span> <span class="token class-name">CropperElement</span> <span class="token punctuation">{</span>\n  myStringProperty <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n  myNumberProperty <span class="token operator">=</span> <span class="token number">NaN</span><span class="token punctuation">;</span>\n  myBooleanProperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">observedAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span>observedAttributes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token string">&#39;my-boolean-property&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;my-number-property&#39;</span><span class="token punctuation">,</span>\n      <span class="token string">&#39;my-string-property&#39;</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\nMyCropperElement<span class="token punctuation">.</span><span class="token function">$define</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-html" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-cropper-element</span> <span class="token attr-name">my-string-property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>foo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">my-number-property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">my-boolean-property</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-cropper-element</span><span class="token punctuation">&gt;</span></span>\n</code></pre></div><h2 id="properties" tabindex="-1"><a class="header-anchor" href="#properties" aria-hidden="true">#</a> Properties</h2>',6),i={href:"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement",target:"_blank",rel:"noopener noreferrer"},c=(0,s._)("code",null,"HTMLElement",-1),r=(0,s.uE)('<table><thead><tr><th>Name</th><th>Type</th><th>Default</th><th>Options</th><th>Description</th></tr></thead><tbody><tr><td>shadowRootMode</td><td><code>string</code></td><td><code>&quot;open&quot;</code></td><td><code>&quot;closed&quot; | &quot;open&quot;</code></td><td>Indicates the encapsulation mode for the shadow DOM tree.</td></tr><tr><td>slottable</td><td><code>boolean</code></td><td><code>true</code></td><td>-</td><td>Indicates whether this element contains a <code>&lt;slot&gt;</code> element.</td></tr><tr><td>themeColor</td><td><code>string</code></td><td>-</td><td>-</td><td>Indicates the theme color of this element and its children.</td></tr></tbody></table><h2 id="methods" tabindex="-1"><a class="header-anchor" href="#methods" aria-hidden="true">#</a> Methods</h2><h3 id="getshadowroot" tabindex="-1"><a class="header-anchor" href="#getshadowroot" aria-hidden="true">#</a> $getShadowRoot</h3><ul><li><strong>Syntax</strong>: <code>$getShadowRoot()</code></li><li><strong>Returns</strong>: <ul><li>Type: <code>ShadowRoot</code></li><li>The shadow root.</li></ul></li></ul><p>Outputs the shadow root of the element, even if its mode is <code>&quot;closed&quot;</code>.</p><h3 id="addstyles" tabindex="-1"><a class="header-anchor" href="#addstyles" aria-hidden="true">#</a> $addStyles</h3><ul><li><p><strong>Syntax</strong>: <code>$addStyles(styles)</code></p></li><li><p><strong>Arguments</strong>:</p><ul><li><code>styles</code>: <ul><li>Type: <code>string</code></li><li>The styles to add.</li></ul></li></ul></li><li><p><strong>Returns</strong>:</p><ul><li>Type: <code>CSSStyleSheet | HTMLStyleElement</code></li><li>The generated style sheet.</li></ul></li><li><p><strong>Example</strong>:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> canvas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CropperCanvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncanvas<span class="token punctuation">.</span><span class="token function">$addStyles</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  :host {\n    border: 1px solid #39f;\n  }\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p>Adds styles to the shadow root.</p><h3 id="emit" tabindex="-1"><a class="header-anchor" href="#emit" aria-hidden="true">#</a> $emit</h3><ul><li><p><strong>Syntax</strong>:</p><ul><li><code>$emit(type)</code></li><li><code>$emit(type, detail)</code></li><li><code>$emit(type, detail, options)</code></li></ul></li><li><p><strong>Arguments</strong>:</p><ul><li><code>type</code>: <ul><li>Type: <code>string</code></li><li>The name of the event.</li></ul></li><li><code>detail</code>: <ul><li>Type: <code>*</code></li><li>Default: <code>undefined</code></li><li>The data passed when initializing the event.</li></ul></li><li><code>options</code>: <ul><li>Type: <code>CustomEventInit</code></li><li>Default: <code>{ bubbles: true, cancelable: true, composed: true }</code></li><li>The other event options.</li></ul></li></ul></li><li><p><strong>Returns</strong>:</p><ul><li>Type: <code>boolean</code></li><li>The result value.</li></ul></li><li><p><strong>Example</strong>:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> selection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CropperSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nselection<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">160</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">90</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p>Dispatches an event at the current element.</p><h3 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick" aria-hidden="true">#</a> $nextTick</h3><ul><li><strong>Syntax</strong>: <ul><li><code>$nextTick()</code></li><li><code>$nextTick(callback)</code></li></ul></li><li><strong>Arguments</strong>: <ul><li><code>callback</code>: <ul><li>Type: <code>Function</code></li><li>The callback to execute after the next DOM update cycle.</li></ul></li></ul></li><li><strong>Returns</strong>: <ul><li>Type: <code>Promise</code></li><li>A promise that resolves to nothing.</li></ul></li></ul><p>Defers the callback to be executed after the next DOM update cycle.</p><h2 id="static-properties" tabindex="-1"><a class="header-anchor" href="#static-properties" aria-hidden="true">#</a> Static Properties</h2><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>$name</td><td><code>string</code></td><td>The name of the custom element.</td></tr><tr><td>$version</td><td><code>string</code></td><td>The version of the package.</td></tr></tbody></table><h2 id="static-methods" tabindex="-1"><a class="header-anchor" href="#static-methods" aria-hidden="true">#</a> Static methods</h2><h3 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> $define</h3>',18),d={href:"https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define",target:"_blank",rel:"noopener noreferrer"},u=(0,s._)("code",null,"CustomElementRegistry.define()",-1),h=(0,s.uE)('<ul><li><p><strong>Syntax</strong>:</p><ul><li><code>$define()</code></li><li><code>$define(name)</code></li><li><code>$define(options)</code></li><li><code>$define(name, options)</code></li></ul></li><li><p><strong>Alternatives</strong>:</p><ul><li><code>customElements.define(name, constructor)</code></li><li><code>customElements.define(name, constructor, options)</code></li></ul></li><li><p><strong>Arguments</strong>:</p><ul><li><code>name</code>: <ul><li>Type: <code>string</code></li><li>The element name. Defaults to the <code>$name</code> static property of the constructor.</li></ul></li><li><code>options</code>: <ul><li>Type: <code>Object</code></li><li>The element definition options.</li></ul></li></ul></li><li><p><strong>Example</strong>:</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Define as a autonomous custom element: `&lt;my-cropper-element&gt;&lt;/my-cropper-element&gt;`.</span>\nCropperElement<span class="token punctuation">.</span><span class="token function">$define</span><span class="token punctuation">(</span><span class="token string">&#39;my-cropper-element&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul>',1),k={};var m=(0,t(3744).Z)(k,[["render",function(e,n){const t=(0,s.up)("ExternalLinkIcon");return(0,s.wg)(),(0,s.iD)("div",null,[a,(0,s._)("p",null,[(0,s.Uk)("The "),o,(0,s.Uk)(" interface represents any Cropper element, extends the "),(0,s._)("a",l,[(0,s.Uk)("HTMLElement"),(0,s.Wm)(t)]),(0,s.Uk)(" interface.")]),p,(0,s._)("p",null,[(0,s.Uk)("Inherits properties from its parent, "),(0,s._)("a",i,[c,(0,s.Wm)(t)]),(0,s.Uk)(", and implements the following properties:")]),r,(0,s._)("p",null,[(0,s.Uk)("Defines the constructor as a new custom element. It is just a shortcut to call "),(0,s._)("a",d,[u,(0,s.Wm)(t)]),(0,s.Uk)(".")]),h])}]])}}]);