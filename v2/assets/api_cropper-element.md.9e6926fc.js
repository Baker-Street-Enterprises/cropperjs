import{_ as s,o as e,c as l,V as a}from"./chunks/framework.e7a370da.js";const F=JSON.parse('{"title":"CropperElement","description":"","frontmatter":{},"headers":[],"relativePath":"api/cropper-element.md","filePath":"api/cropper-element.md","lastUpdated":1686469647000}'),o={name:"api/cropper-element.md"},n=a(`<h1 id="cropperelement" tabindex="-1">CropperElement <a class="header-anchor" href="#cropperelement" aria-label="Permalink to &quot;CropperElement&quot;">​</a></h1><p>The <code>CropperElement</code> interface represents any Cropper element, extends the <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement" target="_blank" rel="noreferrer">HTMLElement</a> interface.</p><h2 id="specifications" tabindex="-1">Specifications <a class="header-anchor" href="#specifications" aria-label="Permalink to &quot;Specifications&quot;">​</a></h2><ul><li>The name of public properties should start with an alphabetic character.</li><li>The name of private properties should start with <code>$</code>.</li><li>The name of public/private custom methods should start with <code>$</code>.</li><li>The name of private custom listeners should start with <code>$on</code>.</li></ul><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">CropperElement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cropperjs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Or</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// import CropperElement from &#39;@cropper/element&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyCropperElement</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CropperElement</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">myStringProperty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">myNumberProperty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">myBooleanProperty</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">get</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">observedAttributes</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">super</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">observedAttributes</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">([</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-boolean-property</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-number-property</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-string-property</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    ])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">MyCropperElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$define</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">my-cropper-element</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">my-string-property</span><span style="color:#89DDFF;">=&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">my-number-property</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">my-boolean-property</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">my-cropper-element</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><p>Inherits properties from its parent, <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement" target="_blank" rel="noreferrer"><code>HTMLElement</code></a>, and implements the following properties:</p><table><thead><tr><th>Name</th><th>Type</th><th>Default</th><th>Options</th><th>Description</th></tr></thead><tbody><tr><td>shadowRootMode</td><td><code>string</code></td><td><code>&quot;open&quot;</code></td><td><code>&quot;closed&quot; | &quot;open&quot;</code></td><td>Indicates the encapsulation mode for the shadow DOM tree.</td></tr><tr><td>slottable</td><td><code>boolean</code></td><td><code>true</code></td><td>-</td><td>Indicates whether this element contains a <code>&lt;slot&gt;</code> element.</td></tr><tr><td>themeColor</td><td><code>string</code></td><td>-</td><td>-</td><td>Indicates the theme color of this element and its children.</td></tr></tbody></table><h2 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h2><h3 id="getshadowroot" tabindex="-1">$getShadowRoot <a class="header-anchor" href="#getshadowroot" aria-label="Permalink to &quot;$getShadowRoot&quot;">​</a></h3><ul><li><strong>Syntax</strong>: <code>$getShadowRoot()</code></li><li><strong>Returns</strong>: <ul><li>Type: <code>ShadowRoot</code></li><li>The shadow root.</li></ul></li></ul><p>Outputs the shadow root of the element, even if its mode is <code>&quot;closed&quot;</code>.</p><h3 id="addstyles" tabindex="-1">$addStyles <a class="header-anchor" href="#addstyles" aria-label="Permalink to &quot;$addStyles&quot;">​</a></h3><ul><li><p><strong>Syntax</strong>: <code>$addStyles(styles)</code></p></li><li><p><strong>Arguments</strong>:</p><ul><li><code>styles</code>: <ul><li>Type: <code>string</code></li><li>The styles to add.</li></ul></li></ul></li><li><p><strong>Returns</strong>:</p><ul><li>Type: <code>CSSStyleSheet | HTMLStyleElement</code></li><li>The generated style sheet.</li></ul></li><li><p><strong>Example</strong>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> canvas </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CropperCanvas</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">canvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$addStyles</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">  :host {</span></span>
<span class="line"><span style="color:#C3E88D;">    border: 1px solid #39f;</span></span>
<span class="line"><span style="color:#C3E88D;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><p>Adds styles to the shadow root.</p><h3 id="emit" tabindex="-1">$emit <a class="header-anchor" href="#emit" aria-label="Permalink to &quot;$emit&quot;">​</a></h3><ul><li><p><strong>Syntax</strong>:</p><ul><li><code>$emit(type)</code></li><li><code>$emit(type, detail)</code></li><li><code>$emit(type, detail, options)</code></li></ul></li><li><p><strong>Arguments</strong>:</p><ul><li><code>type</code>: <ul><li>Type: <code>string</code></li><li>The name of the event.</li></ul></li><li><code>detail</code>: <ul><li>Type: <code>*</code></li><li>Default: <code>undefined</code></li><li>The data passed when initializing the event.</li></ul></li><li><code>options</code>: <ul><li>Type: <code>CustomEventInit</code></li><li>Default: <code>{ bubbles: true, cancelable: true, composed: true }</code></li><li>The other event options.</li></ul></li></ul></li><li><p><strong>Returns</strong>:</p><ul><li>Type: <code>boolean</code></li><li>The result value.</li></ul></li><li><p><strong>Example</strong>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> selection </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CropperSelection</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">selection</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$emit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">change</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">y</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">160</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">90</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><p>Dispatches an event at the current element.</p><h3 id="nexttick" tabindex="-1">$nextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;$nextTick&quot;">​</a></h3><ul><li><strong>Syntax</strong>: <ul><li><code>$nextTick()</code></li><li><code>$nextTick(callback)</code></li></ul></li><li><strong>Arguments</strong>: <ul><li><code>callback</code>: <ul><li>Type: <code>Function</code></li><li>The callback to execute after the next DOM update cycle.</li></ul></li></ul></li><li><strong>Returns</strong>: <ul><li>Type: <code>Promise</code></li><li>A promise that resolves to nothing.</li></ul></li></ul><p>Defers the callback to be executed after the next DOM update cycle.</p><h2 id="static-properties" tabindex="-1">Static Properties <a class="header-anchor" href="#static-properties" aria-label="Permalink to &quot;Static Properties&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>$name</td><td><code>string</code></td><td>The name of the custom element.</td></tr><tr><td>$version</td><td><code>string</code></td><td>The version of the package.</td></tr></tbody></table><h2 id="static-methods" tabindex="-1">Static methods <a class="header-anchor" href="#static-methods" aria-label="Permalink to &quot;Static methods&quot;">​</a></h2><h3 id="define" tabindex="-1">$define <a class="header-anchor" href="#define" aria-label="Permalink to &quot;$define&quot;">​</a></h3><p>Defines the constructor as a new custom element. It is just a shortcut to call <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define" target="_blank" rel="noreferrer"><code>CustomElementRegistry.define()</code></a>.</p><ul><li><p><strong>Syntax</strong>:</p><ul><li><code>$define()</code></li><li><code>$define(name)</code></li><li><code>$define(options)</code></li><li><code>$define(name, options)</code></li></ul></li><li><p><strong>Alternatives</strong>:</p><ul><li><code>customElements.define(name, constructor)</code></li><li><code>customElements.define(name, constructor, options)</code></li></ul></li><li><p><strong>Arguments</strong>:</p><ul><li><code>name</code>: <ul><li>Type: <code>string</code></li><li>The element name. Defaults to the <code>$name</code> static property of the constructor.</li></ul></li><li><code>options</code>: <ul><li>Type: <code>Object</code></li><li>The element definition options.</li></ul></li></ul></li><li><p><strong>Example</strong>:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Define as a autonomous custom element: \`&lt;my-cropper-element&gt;&lt;/my-cropper-element&gt;\`.</span></span>
<span class="line"><span style="color:#A6ACCD;">CropperElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-cropper-element</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul>`,29),t=[n];function p(r,c,i,d,y,D){return e(),l("div",null,t)}const u=s(o,[["render",p]]);export{F as __pageData,u as default};
